
; 1) Enable the extension that can save strings to a file in the browser
extensions [ send-to ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variable and Breed declarations ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

globals [
    ;; variables used to assign unique color and shape to clients
    shape-names        ;; list that holds the names of the non-sick shapes a student's turtle can have
    colors             ;; list that holds the colors used for students' turtles
    color-names        ;; list that holds the names of the colors used for students' turtles
    used-shape-colors  ;; list that holds the shape-color pairs that are already being used
    max-possible-codes ;; total number of possible unique shape/color combinations
    sample-car  Slowing-Point ;;to show slowest car
    RunTime
    ServerZoom-radius
  
  	watched
    
    ;; ===== UI widgets (from Desktop/Authoring) =====
    __hnw_teacher_radius
    __hnw_teacher_extra-lane-length
    __hnw_teacher_number-of-cars
    __hnw_teacher_number-of-trucks
    __hnw_teacher_InitialSpeed
    __hnw_teacher_acceleration
    __hnw_teacher_deceleration
    __hnw_teacher_DistanceFromCar
    __hnw_teacher_speed-parameter
    __hnw_teacher_MaxSpeed
    __hnw_teacher_allowance
    __hnw_teacher_requiredlaps
    __hnw_teacher_change-lane-x-of-100
     
    ;; switches
    __hnw_teacher_androids-change-lane?    
    __hnw_teacher_allow-accident?
    __hnw_teacher_speed-limit?
    __hnw_teacher_ShowSlowestPoint?
  
    ;; --- CSV logging (two files) ---
    csv_init            ;; one-row "world init" CSV (header + one row)
    csv_run             ;; multi-row "per-student, per-second" CSV (header + many rows)
    csv_has_init?       ;; did we write the init header+row?
    csv_has_run_header? ;; did we write the run header?
    
 
    ;; AverageSpeed plot meta
    avg_xmin avg_xmax avg_ymin avg_ymax
    avg_autoplot? avg_current_pen avg_legend_open? avg_num_pens
    avg_penA_name avg_penA_mode avg_penA_interval avg_penA_color avg_penA_lastx
    avg_penB_name avg_penB_mode avg_penB_interval avg_penB_color avg_penB_lastx
    avg_penA_points  ;; list of [x y color penDown?]
    avg_penB_points  ;; list of [x y color penDown?]

  
  	CSV_SEP
  
    DEBUG? go-started? ui_hb       ;; ui_hb = once-per-second heartbeat counter
]



turtles-own [
  speed        ;; hold the turtle speed
  speed-limit  ;; hold the turtle max speed
  speed-min    ;; hold the turtle min speed
  base-shape   ;; hold the turtle shape
  lane         ;; 1=inside, 2=outside, 3=Overtakinglane
]



;; derive from turtle
breed [ androids android ]  ;; simulate car on the road
breed [ students student ]  ;; players car's
breed [ trucks truck ]      ;; simulate track on the road

patches-own [ orig-color acc-tick-conuter ]

students-own [
  acc             ;; hold the acceleration speed parameter
  zoom-radius     ;; hold the zoom option for player
  client-perspective
  user-id         ;; unique id, input by the client when they log in, to identify each student turtle
  InitialHeading  ;; save the heading parameter of student position at start
  PrevHeading     ;; save the previous heading
  LapCounter      ;; counter the lap's that student made
  IsFirstLap      ;; flag to know if this is the student first lap
  MessageRead
  firstSetup
  ;;;;;;;; i added these three lines for the HubNet system that he can brodcast the messeges
  name-label   ;; persistent display name (kept above the status)
  msg          ;; last status text ("Free"/"Occupied")
  msg-ttl      ;; ticks left to show the status (auto-clears)
  
;;;;;;;;;;;;;;;;;;;;;;;;;;; added\changed for HubNet:
  ui-overall-time
  ui-laps
  ui-message
  ui-speed
  ui-who
  
  laps-float   ;; total laps traveled as a float (e.g., 1.3 = 1 lap + 30%)
  ; per-client history for plots
  laps-history     ;; list of this student's recent laps-float values (for client histogram)
  speed-history   ;; list of this student's recent speeds (for client histogram)

]

;;;;;;;;;;;;;;;;;;;;;;
;; Setup Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;


;; occurred when startup NetLogo
to startup
  set __hnw_teacher_radius                  26
  set __hnw_teacher_extra-lane-length       22
  set __hnw_teacher_number-of-cars          65
  set __hnw_teacher_number-of-trucks        1
  set __hnw_teacher_InitialSpeed            100
  set __hnw_teacher_acceleration            1.0
  set __hnw_teacher_deceleration            1.0
  set __hnw_teacher_DistanceFromCar         4 
  set __hnw_teacher_speed-parameter         5
  set __hnw_teacher_MaxSpeed                100
  set __hnw_teacher_allowance               1
  set __hnw_teacher_requiredlaps            1
  set __hnw_teacher_change-lane-x-of-100    99
  set __hnw_teacher_androids-change-lane?   false
  set __hnw_teacher_allow-accident?         true
  set __hnw_teacher_speed-limit?            false
  set __hnw_teacher_ShowSlowestPoint?       false
  set-up-vars
  
  ;; --- CSV defaults ---
  set csv_init ""
  set csv_run ""
  set csv_has_init? false
  set csv_has_run_header? false
  
 
  ;;;;;;;;;;;;;;;;;;;;;; ADDED FOR THE TIME STEMP;;;;;;;;;;;;;;;;;;;;
;   set csv_started-at ""
;   set csv_finished-at ""
;   set csv_start_ticks 0
;   set csv_start_runtime 0

  
  set CSV_SEP "," ;; if your Excel uses semicolon locale, set to ";"

end


  ;;occurred when setup butten is pressed
to setup
  
  set DEBUG? true                  ;; turn logs on (flip to false when done)
  dbg "S0 enter setup"
  
  set ServerZoom-radius 20
  Set RunTime 0
  
  ask androids [ die ]
  ask trucks [ die ]
  
  
  ;; ===== Defensive defaults for all UI widgets =====
  ;; numeric sliders
  if not is-number? __hnw_teacher_radius               [ set __hnw_teacher_radius 70 ]
  if not is-number? __hnw_teacher_extra-lane-length    [ set __hnw_teacher_extra-lane-length 22 ]
  if not is-number? __hnw_teacher_number-of-cars       [ set __hnw_teacher_number-of-cars 50 ]
  if not is-number? __hnw_teacher_number-of-trucks     [ set __hnw_teacher_number-of-trucks 1 ]
  if not is-number? __hnw_teacher_InitialSpeed         [ set __hnw_teacher_InitialSpeed 100 ]
  if not is-number? __hnw_teacher_acceleration         [ set __hnw_teacher_acceleration 1 ]
  if not is-number? __hnw_teacher_deceleration         [ set __hnw_teacher_deceleration 1 ]
  if not is-number? __hnw_teacher_DistanceFromCar      [ set __hnw_teacher_DistanceFromCar 4 ]
  if not is-number? __hnw_teacher_speed-parameter      [ set __hnw_teacher_speed-parameter 5 ]
  if not is-number? __hnw_teacher_MaxSpeed             [ set __hnw_teacher_MaxSpeed 100 ]
  if not is-number? __hnw_teacher_allowance            [ set __hnw_teacher_allowance 1 ]
  if not is-number? __hnw_teacher_requiredlaps         [ set __hnw_teacher_requiredlaps 1 ]
  if not is-number? __hnw_teacher_change-lane-x-of-100 [ set __hnw_teacher_change-lane-x-of-100 99 ]

  ;; switches (booleans)
  if not is-boolean? __hnw_teacher_androids-change-lane? [ set __hnw_teacher_androids-change-lane? false ]
  if not is-boolean? __hnw_teacher_allow-accident?       [ set __hnw_teacher_allow-accident? true ]
  if not is-boolean? __hnw_teacher_speed-limit?          [ set __hnw_teacher_speed-limit? false ]
  if not is-boolean? __hnw_teacher_ShowSlowestPoint?     [ set __hnw_teacher_ShowSlowestPoint? false ]
  ;; ===== end defaults =====
  
  ;; keep full ring (incl. third-lane outer bound) inside this world with a small margin - BUT NOW THE TURTLE IS MOVING ACROS THE LANES ! NOT GOOD!
  let halfMin min (list max-pxcor (- min-pxcor) max-pycor (- min-pycor))
  let limit2  (halfMin - 2) * (halfMin - 2)   ;; 2-patch visual margin
;   let maxR    floor sqrt (limit2 - 600)       ;; was 750 → 600 to permit larger r
  let maxR    floor sqrt (limit2 - 200)
  if __hnw_teacher_radius > maxR [
    set __hnw_teacher_radius maxR
  ]

  ask patches [ set pcolor green ]
  
  ask patches [ setup-road __hnw_teacher_radius ]
  
  ask patches [ setup-Extra-lanes __hnw_teacher_radius ]
  ask androids [ die ]
  
  setup-cars __hnw_teacher_radius
  
  setup-trucks __hnw_teacher_radius
  ask students [ set LapCounter 0 ]
  ask students [ set IsFirstLap 1 ]
  ask students [ send-lap-time ]
  ask students [ send-lap-counter ]
  ask turtles [separate-cars]
  ask patches [set orig-color pcolor]
  clear-all-plots
  
  ;; === AverageSpeed plot: initialize tracking ===
  set avg_xmin 0
  set avg_xmax 0
  set avg_ymin 0
  set avg_ymax 0
  set avg_autoplot? true
  set avg_current_pen "MaxSpeed"   ;; matches your Desktop example
  set avg_legend_open? true
  set avg_num_pens 2

  set avg_penA_name "MaxSpeed"
  set avg_penA_mode 0
  set avg_penA_interval 1
  set avg_penA_color 105
  set avg_penA_lastx 0

  set avg_penB_name "MinSpeed"
  set avg_penB_mode 0
  set avg_penB_interval 1
  set avg_penB_color 55
  set avg_penB_lastx 0

  set avg_penA_points []
  set avg_penB_points []

  
  ;; --- write the one-row init CSV now ---
  reset-ticks
  csv-build-init-file

  ask students [ setup-student-vars user-id ]
  
  dbg "S9-exit"
end




  ;; initialize global variables
to set-up-vars
  set shape-names [  "turtle" "butterfly" "airplane" "bug" "default" "arrow" "bug" ]
  set colors      (list brown green yellow  (violet + 1) (sky + 1))
  set color-names ["brown" "green" "yellow" "purple" "blue"]
  set max-possible-codes (length colors * length shape-names)
  set used-shape-colors []
end

   ;;to seprate car's when we do setup
to separate-cars    ;; turtle procedure
  if any? other turtles in-cone 2 360
    [ moveMeFWD
      separate-cars ]
end


;; ===== create road (clamped to world) =====
to setup-road [ r ]  ;; patch procedure
  let d2 (pxcor * pxcor + pycor * pycor)
  let worldR min (list max-pxcor (- min-pxcor) max-pycor (- min-pycor))
  let limit2 (worldR - 1) * (worldR - 1)   ;; leave a 1-patch safety margin
  let rsq r * r

  ;; black band: r^2 ± {100, 400}
  let in2   max list (rsq - 100) 1 
  let out2  min list (rsq + 400) limit2
  if (d2 >= in2) and (d2 <= out2) [ set pcolor black ]

  ;; outer white band: r*(r+5) .. r*(r+5) + 20  (keep your original formula, clamped)
  let inW2  max list (r * (r + 5)) 1
  let outW2 min list (r * (r + 5) + 20) limit2
  if (d2 >= inW2) and (d2 <= outW2) [ set pcolor white ]

end


;; ===== create extra / third lane (clamped to world) =====
to setup-Extra-lanes [ r ]  ;; patch procedure
  let d2 (pxcor * pxcor + pycor * pycor)
  let worldR min (list max-pxcor (- min-pxcor) max-pycor (- min-pycor))
  let limit2 (worldR - 1) * (worldR - 1)
  let rsq r * r

  ;; black widening: r^2 + [400 .. 750], but only within ± extra-lane-length vertically
  let in2   max list (rsq + 400) 1
  let out2  min list (rsq + 600) limit2 ;-TODO - TO DELETE

  if (d2 >= in2) and (d2 <= out2) and (abs pycor <= __hnw_teacher_extra-lane-length) [
    set pcolor black
  ]

  ;; white on the widened band: r^2 + [400 .. 420]
  let inW2  max list (rsq + 400) 1
  let outW2 min list (rsq + 410) limit2
  if (d2 >= inW2) and (d2 <= outW2) and (abs pycor <= __hnw_teacher_extra-lane-length) [
    set pcolor white
  ]

end





  ;;create androids/truck and locate them on both lane
to setup-cars [r]
  ;dbg (word "ENTER setup-cars r=" r)
  
    ; first lane
  create-androids  (__hnw_teacher_number-of-cars + 1) / 2 - (__hnw_teacher_number-of-cars + 1) * 0.05 [
    ifelse (1 = 2);(( random 100 ) > 90 ) ; 10% are trucks - eo - cancelled
    [  ; set Trucks
      set breed trucks
      set speed-limit __hnw_teacher_MaxSpeed ;- 0.4 * __hnw_teacher_MaxSpeed
      set shape "Truck"

    ]
    [ ; set androids
      set speed-limit __hnw_teacher_MaxSpeed
      set shape "car top"
    ]
    set size 2  ; easier to see
    fd r
    rt 90
    set lane 1
    set speed 1 + random __hnw_teacher_InitialSpeed
    set speed-min 0
    set color white
    ask other androids-here
  [ die ]

  ]
    ; second lane
 create-androids  (__hnw_teacher_number-of-cars + 1) / 2 + (__hnw_teacher_number-of-cars + 1) * 0.05 [
    ifelse (1 = 2);(( random 100 ) > 90 ) ; 10% are trucks
    [  ; set Trucks
      set breed trucks
      set speed-limit __hnw_teacher_MaxSpeed; - 0.3 * __hnw_teacher_MaxSpeed
      set shape "Truck"

    ]
    [   ; set androids
      set speed-limit __hnw_teacher_MaxSpeed
      set shape "car top"
    ]
    set size 2  ;; easier to see
    fd r + 5
    rt 90
    set speed 1 + random __hnw_teacher_InitialSpeed
    set lane 2
    set speed-min 0
    set color white
    ask other androids-here
  [ die ]
   ask other trucks-here
  [ die ]
  ]

end


to setup-trucks [r]
  
    ; first lane
  create-androids  (__hnw_teacher_number-of-trucks + 1) / 2 - (__hnw_teacher_number-of-trucks + 1) * 0.05 [
    ifelse (1 = 1);(( random 100 ) > 90 ) ; 10% are trucks - eo - cancelled
    [  ; set Trucks
      set breed trucks
      set speed-limit __hnw_teacher_MaxSpeed ;- 0.4 * __hnw_teacher_MaxSpeed
      set shape "Truck"

    ]
    [ ; set androids
      set speed-limit __hnw_teacher_MaxSpeed
      set shape "car top"
    ]
    set size 2  ; easier to see
    fd r
    rt 90
    set lane 1
    set speed 1 + random __hnw_teacher_InitialSpeed
    set speed-min 0
    set color white
    ask other androids-here
  [ die ]

  ]
    ; second lane
 create-androids  (__hnw_teacher_number-of-trucks + 1) / 2 + (__hnw_teacher_number-of-trucks + 1) * 0.05 [
    ifelse (1 = 1);(( random 100 ) > 90 ) ; 10% are trucks
    [  ; set Trucks
      set breed trucks
      set speed-limit __hnw_teacher_MaxSpeed; - 0.3 * __hnw_teacher_MaxSpeed
      set shape "Truck"

    ]
    [   ; set androids
      set speed-limit __hnw_teacher_MaxSpeed
      set shape "car top"
    ]
    set size 2  ;; easier to see
    fd r + 5
    rt 90
    set speed 1 + random __hnw_teacher_InitialSpeed
    set lane 2
    set speed-min 0
    set color white
    ask other androids-here
  [ die ]
   ask other trucks-here
  [ die ]
  ]
  ;dbg "EXIT setup-trucks"

end


;;;;;;;;;;;;;;;;;;;;;;;;
;; Runtime Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;;;

to go

  every 0.1
    [
      if __hnw_teacher_androids-change-lane? [ ask androids [ zigzag ]] ;;if button is up allow change lane 
      circle __hnw_teacher_radius         ;;move the car on the road
      plot-cars             ;;display the plot on the screen
      
      ;; update each student's cumulative laps - helper for the distance histogram of the host plot
      ask students [
        
        ;show (word "[DBG] GO: inside ask students, who=" who)
        set laps-float calc-laps-float
        ;; keep a short rolling history so histograms show something
        let HIST_LEN 120  ;; ~12 seconds if every 0.1; tweak as you like

        ;; append current samples
        set speed-history lput speed       speed-history
        set laps-history  lput laps-float  laps-history
        
        if length speed-history > HIST_LEN [ set speed-history butfirst speed-history ]
        if length laps-history  > HIST_LEN [ set laps-history  butfirst laps-history  ]
        
      ]

      if __hnw_teacher_ShowSlowestPoint?
      [ Draw-Slowest ]

      ;; --- status TTL maintenance (message below name) ---
      ;; decay first, so labels that just expired can be redrawn below
      decay-msg

      ask students [
       if (not is-string? name-label) or (name-label = "") [
         set name-label (word "ID " user-id)
       ]

       ;; only draw the baseline label when there is no active message
       if msg-ttl = 0 [
         ;; baseline: show name + current speed on one line
         set label (word name-label " -> " floor speed)
         set label-color red
       ]

      ]
     tick
   ]
     ; calculate time in sec
    every 1
    [
      Set RunTime RunTime + 1
      ask students [ refresh-student-ui ]
      
      
      ;;;;;;;;;;; CSV (per-second) ;;;;;;;;;;;
      csv-ensure-run-header
      if any? students [
        ;; gather all rows first, then append (faster)
        let rows [ csv-row-for-student ] of students
        set csv_run (word csv_run (reduce word rows))
      ]
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      
      ask patches [ifelse acc-tick-conuter > 0 [set acc-tick-conuter acc-tick-conuter - 1][set pcolor orig-color] ]
    ]
end



  ;;change lane of androids
to zigzag
  if (( random 100 ) < __hnw_teacher_change-lane-x-of-100 ) and (speed < __hnw_teacher_MaxSpeed) and (count other turtles in-cone __hnw_teacher_DistanceFromCar 30 > 0)
  [
   if (lane = 1 )
   [
     execute-move 270
     stop
   ]

   if (lane = 2)
   [
     execute-move 90
     stop
   ]
    ]
end


to circle [r]
     ask turtles [ move-along-circle r ]
end

   ;;draw the slowest turtle on road in red
to Draw-Slowest
    ; set Slowing-Point one-of turtles with [speed = min [speed] of turtles]
  let min-speed min [speed] of turtles
  set min-speed min-speed + __hnw_teacher_allowance
  ask turtles [
   ifelse speed < min-speed
   [set color red  ]
   [set color blue  ]
  ]
end

   ;;move androids forwards on thier lane if they are on the same patch with other
to MoveMeFWD
   if lane = 1
  [
    fd (pi * __hnw_teacher_radius / 180) * (speed / 50)
    rt speed / 50
  ]
   if lane = 2
  [
    fd (pi * ( __hnw_teacher_radius + 5) / 180) * (speed / 50)
    rt speed / 50
  ]
     if lane = 3
  [
    fd (pi * ( __hnw_teacher_radius + 10) / 180) * (speed / 50)
    rt speed / 50
  ]
   if any? other turtles-here
   [ MoveMeFWD ]
end


 ;;the main method who move's the car forwords
to move-along-circle [r] ; turtles function
  if (breed =  students)
     [ set PrevHeading heading ]  ; For Lap Counter
  let ps patches in-cone __hnw_teacher_DistanceFromCar 60
  let ps1 patches in-cone 2 360
   ; if want to show the cone that car lock ahead take out the comment below
   ;  ask ps [ set pcolor 5]
  let car-ahead one-of other turtles-on ps
  let car-ahead1 one-of other turtles-on ps1
   ; if car is on the end of Extra lane than stop car
  if (lane = 3) and ((ycor > __hnw_teacher_extra-lane-length  ) or (ycor < 0 - __hnw_teacher_extra-lane-length ))
  [
    set speed 0
    stop
  ]


 
  if-else __hnw_teacher_allow-accident? and (breed =  students)
           ; if button allow accident is turn-on and you are student
  [ifelse car-ahead != nobody
    [
      if speed > [speed] of car-ahead
      [ accident-fireworks
        set speed [speed] of car-ahead ]
        slow-down-car

    ]
    [
       ifelse car-ahead1 != nobody
       [
         if speed > [speed] of car-ahead1
         [ set speed [speed] of car-ahead1 ]
         slow-down-car
       ]
        ; otherwise, speed up
       [ speed-up-car ]
    ]

 ]
        ; if button allow accident is turn-off
  [
    ifelse car-ahead != nobody and( [speed] of car-ahead   < speed  + 10 )
    [
      if speed > [speed] of car-ahead
      [ set speed [speed] of car-ahead ]

      slow-down-car
    ]
     ; otherwise, speed up
    [ speed-up-car ]
  ]

  set car-ahead nobody
     ; don't slow down below speed minimum or speed up beyond speed limit
  if speed < speed-min  [ set speed speed-min ]
  if speed > speed-limit and __hnw_teacher_speed-limit?  [ set speed speed-limit ]
     ; perform car move on road
  if lane = 1
  [
    fd (pi * __hnw_teacher_radius / 180) * (speed / 50)
    rt speed / 50
  ]
  if lane = 2
  [
    fd (pi * ( __hnw_teacher_radius + 5) / 180) * (speed / 50)
    rt speed / 50
  ]
  if lane = 3
  [
    fd (pi * ( __hnw_teacher_radius + 10) / 180) * (speed / 50)
    rt speed / 50
  ]
  calc_lap_counter
end

   ;; calculate Lap Counter for student only
to calc_lap_counter

  if (breed =  students)
   [
      if ((PrevHeading <= InitialHeading) and (heading > InitialHeading)) or ((PrevHeading < InitialHeading) and (heading >= InitialHeading))
      [
        ifelse (IsFirstLap = 0)
        [
          set LapCounter LapCounter + 1
          send-Lap-counter 
          if (__hnw_teacher_requiredlaps = LapCounter) and (__hnw_teacher_requiredlaps > 0)
          [
             send-lap-time
          ]
        ]
        [
          set LapCounter 0
          set IsFirstLap 0
          send-Lap-counter
        ]
      ]
   ]

end



;;helper the procedure that will polt the distance histogram of the host
;; Report the total laps (LapCounter + fractional progress) for one student
to-report calc-laps-float  ;; turtle reporter, student context
  let diff heading - InitialHeading
  if diff < 0 [ set diff diff + 360 ]
  report LapCounter + (diff / 360)
end


to slow-down-car  ;; turtle procedure
   set speed speed - __hnw_teacher_deceleration
   ;accident-fireworks
end


to accident-fireworks
  ask patches in-radius 2
      [ set pcolor red + random-float 3
        set acc-tick-conuter 1] ;;;actually seconds not ticks:)

end


to speed-up-car  ;; turtle procedure
  ifelse breed = students
  [ set speed speed + acc
    set acc 0
  ]
  [ set speed speed + __hnw_teacher_acceleration ]
end

   ;; turtle procedure chnge car lane, get the direction to go-to
to change-lane [ side ]
  if (lane = 1 ) and (side = "left")
  [
    set lane  2
    setxy 0 0
    fd __hnw_teacher_radius + 5
    stop
  ]
  if (lane = 2) and (side = "right")
  [
    set lane  1
    setxy 0 0
    back __hnw_teacher_radius
    stop
  ]
   if (lane = 2) and (side = "left")
  [
    set lane  3
    setxy 0 0
    fd __hnw_teacher_radius + 10
    stop
  ]
   if (lane = 3) and (side = "right")
  [
    set lane  2
    setxy 0 0
    back __hnw_teacher_radius + 5
    stop
  ]
end


to plot-cars
  if (count turtles != 0) [
    set-current-plot "AverageSpeed"

    ;; MinSpeed
    set-current-plot-pen "MinSpeed"
    let yMin min [speed] of turtles
    plot yMin
    record-avg-point avg_penB_name ticks yMin

    ;; MaxSpeed
    set-current-plot-pen "MaxSpeed"
    let yMax max [speed] of turtles
    plot yMax
    record-avg-point avg_penA_name ticks yMax

    ;; keep rough ranges for export
    if ticks > avg_xmax [ set avg_xmax ticks ]
    if ticks < avg_xmin [ set avg_xmin ticks ]  ;; stays 0 unless you reset ticks mid-run
    if (avg_ymin = 0) or (yMin < avg_ymin) [ set avg_ymin yMin ]
    if (yMax > avg_ymax) [ set avg_ymax yMax ]
  ]
end



to record-avg-point [penName x y]
  let penDown? true
  if penName = avg_penA_name [
    set avg_penA_lastx x
    set avg_penA_points lput (list x y avg_penA_color penDown?) avg_penA_points
  ]
  if penName = avg_penB_name [
    set avg_penB_lastx x
    set avg_penB_points lput (list x y avg_penB_color penDown?) avg_penB_points
  ]
end




   ;; turtle function ,get direction to change car lane and
   ;; call change-lane function if possible , else
   ;; return to (student only) occupied
to execute-move [direction]
   ; check aveliable space in that direction
  ifelse direction = 90
  [
    ;; right
    rt direction
    let ps patches in-cone 8 60
    let car-ahead one-of other turtles-on ps
    ifelse (car-ahead = nobody) and ((lane = 2) or (lane = 3))
    [
      if (breed = students) [ student-msg "Free" ]
      change-lane "right"
    ]

    [
      if (breed = students) [ student-msg "Occupied"]
    ]
    lt direction
  ]

  ;;left
  [  rt direction
     let ps patches in-cone 8 60
     let car-ahead one-of other turtles-on ps
     ifelse (car-ahead = nobody) and ((lane = 1) or (lane = 2))
     [
      if (breed = students) [ student-msg "Free" ]
      ifelse (( lane = 2 ) and (ycor < __hnw_teacher_extra-lane-length - 3) and (ycor > 3 - __hnw_teacher_extra-lane-length)) or (lane != 2)
      [
      change-lane  "left"
      ]
      [ if (breed = students) [ student-msg "Occupied" ] ]
    ]
    [ if (breed = students) [ student-msg "Occupied" ] ]
    lt direction
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;
;; HubNet Procedures ;;
;;;;;;;;;;;;;;;;;;;;;;;


;; Called automatically when a student joins (Student role)
;; OBSERVER context — must REPORT the student's turtle who number.
to-report on-connect [alias]
  let s one-of students with [ user-id = alias ]
  
  show (word "DEBUG on-connect: alias=" alias
           " existing? " (s != nobody))

  ifelse s = nobody [
    ;; first time: create a student for this alias
    let new-who create-new-student alias
    set s one-of students with [ who = new-who ]
  ] [
    ;; reconnect: optionally refresh
    ask s [ setup-student-vars alias ]
  ]

  show (word "DEBUG on-connect: alias=" alias
           " -> who=" [who] of s)

  report [who] of s
end



;; HubNet Web version: remove a student by their participant id
to remove-student [uid]
  ask students with [user-id = uid] [
    set used-shape-colors remove my-code used-shape-colors
    die
  ]
end


to-report my-code
  report (position base-shape shape-names) + (length shape-names) * (position color colors)
end



;;;; ask chatgot abiut this-
to-report create-new-student [uid]
  let new-student-who nobody
  create-students 1 [
    setup-student-vars uid
    ;student-setup-speed-histogram
    ;student-setup-distance-histogram
    set client-perspective (list "follow" self zoom-radius) 
    set new-student-who who
    send-info-to-clients
  ]
  report new-student-who
end



to setup-student-vars [uid]
  setxy 0 0
  if firstSetup < 1 [
    set user-id uid
  ]
  set firstSetup 1
  set name-label (word uid)  ;; use the alias the student typed
  show (word "DEBUG setup-student-vars: uid=" uid
           " who=" who
           " name-label=" name-label)

  set-unique-shape-and-color
  set zoom-radius 20
  set size 2    ;; easier to see
  fd __hnw_teacher_radius
  rt 90
  set lane 1
  set speed 1 + random __hnw_teacher_InitialSpeed
  set speed-min 0
  set speed-limit __hnw_teacher_MaxSpeed
  set acc 0
  set InitialHeading heading
  
    set ui-speed        floor speed
  set ui-laps         LapCounter
  set ui-overall-time RunTime
  set ui-message      "Free"
  
  set speed-history []
  set laps-history  []

  ask other androids-here [
    MoveMeFWD ;; avoid student car on android
  ]
end



   ;; student function
   ;;give every student unique shape and color
to set-unique-shape-and-color
  let code random max-possible-codes
  while [member? code used-shape-colors and count students < max-possible-codes]
  [
    set code random max-possible-codes
  ]
  set used-shape-colors (lput code used-shape-colors)
  set base-shape item (code mod length shape-names) shape-names
  set shape base-shape
  set color item (code / length shape-names) colors

end


   ;; student function
   ;; determines  what the command is and performed it
to execute-command [command]
  if command = "speed up"
  [ show (word "speed-up from uid=" user-id " who=" who)
    set acc __hnw_teacher_speed-parameter
    send-info-to-clients
    stop
  ]
  if command = "speed down"
  [ 
    show (word "speed-down from uid=" user-id " who=" who)
    set acc 0 - __hnw_teacher_speed-parameter
    send-info-to-clients
    stop
  ]
  if command = "right"
    [
      show (word "right from uid=" user-id " who=" who)
      execute-move 90 stop
    ]
  if command = "left"
    [
      show (word "left from uid=" user-id " who=" who)
      execute-move 270 stop
    ]
end



to ZoomIn
  set ServerZoom-radius max list 1 (ServerZoom-radius - 1)
  ask students [
    set zoom-radius ServerZoom-radius
    set client-perspective (list "follow" self zoom-radius)
  ]
end

to ZoomOut
  set ServerZoom-radius min list 30 (ServerZoom-radius + 1)
  ask students [
    set zoom-radius ServerZoom-radius
    set client-perspective (list "follow" self zoom-radius) 
  ]
end



   ;;send lap counter to client →  show a short per-turtle status
to send-lap-counter
  if breed = students [
    student-msg (word "Laps " LapCounter)   ;; shows under the name for ~8 cycles
  ]
end

   ;;send lap time to client →  short per-turtle status
to send-lap-time
  if breed = students [
    student-msg (word "OverallTIme " RunTime)     ;; shows under the name for ~8 cycles
  ]
end


   ;; sends the appropriate monitor information back to the client
to send-info-to-clients
  set speed floor speed

  if breed = students [
     if (not is-string? name-label) or (name-label = "") [
       set name-label (word "ID " user-id)
     ]
    ;; only update the baseline when no active status is being shown
    if msg-ttl = 0 [
      ;; top line: name + speed + lap
      set label (word name-label " -> " floor speed)
      set label-color red
    ]

  ]
end



   ;; report the string version of the turtle's color
to-report color-string [color-value]
  report item (position color-value colors) color-names
end



;; Show a short status under the student's name for 8 ticks
to student-msg [txt]
  if breed = students [
     if (not is-string? name-label) or (name-label = "") [
       set name-label (word "ID " user-id)
     ]

    set msg txt
    set ui-message txt   ;; <— add this
    set msg-ttl 8
    set label-color red   ;; keep overlay but always red
  ]
end

;; Called once per tick to fade the status and restore the plain name
to decay-msg
  ask students with [msg-ttl > 0] [
    set msg-ttl msg-ttl - 1
    if msg-ttl = 0 [
      set label name-label
    ]
  ]
end



;; === Student role: button handlers (HubNet Web) ===
to cmd-speed-up
  ;; runs in *this* student's turtle context
  execute-command "speed up"
end

to cmd-speed-down
  execute-command "speed down"
end

to cmd-left
  execute-command "left"
end

to cmd-right
  execute-command "right"
end



to refresh-student-ui  ;; turtle proc
  if breed = students [
    set ui-speed        floor speed
    set ui-laps         LapCounter
    set ui-overall-time RunTime
    set ui-message      msg
    set ui-who          who

  ]
  
  if (is-turtle? watched) [
    ask watched [
      set-current-plot "Student Distance"
      student-update-my-distance-hist
      set-current-plot "Student Speed"
      student-update-my-speed-hist
    ]
  ]
end


to dbg [text]                  ;; was: to dbg [msg]
  if DEBUG? [ show (word "[DBG] " text) ]
end

to dbg-val [tag v]             ;; we already fixed this from 'label'
  if DEBUG? [ show (word "[DBG] " tag " = " v) ]
end


to noop end

to teacher-set-number-of-cars [n]        set __hnw_teacher_number-of-cars n end
to teacher-set-number-of-trucks [n]      set __hnw_teacher_number-of-trucks n end
to teacher-set-radius [n]                set __hnw_teacher_radius n end
to teacher-set-initial-speed [n]         set __hnw_teacher_InitialSpeed n end
to teacher-set-acceleration [x]          set __hnw_teacher_acceleration x end
to teacher-set-deceleration [x]          set __hnw_teacher_deceleration x end
to teacher-set-distance-from-car [n]     set __hnw_teacher_DistanceFromCar n end
to teacher-toggle-androids-change-lane [v] set __hnw_teacher_androids-change-lane? v end
to teacher-toggle-allow-accident [v]     set __hnw_teacher_allow-accident? v end
to teacher-toggle-speed-limit [v]        set __hnw_teacher_speed-limit? v end
to teacher-set-speed-parameter [n]       set __hnw_teacher_speed-parameter n end
to teacher-set-extra-lane-length [n]     set __hnw_teacher_extra-lane-length n end
to teacher-set-max-speed [n]             set __hnw_teacher_MaxSpeed n end
to teacher-set-allowance [n]             set __hnw_teacher_allowance n end
to teacher-toggle-show-slowest-point [v] set __hnw_teacher_ShowSlowestPoint? v end
to teacher-set-required-laps [n]         set __hnw_teacher_RequiredLaps n end
to teacher-set-change-lane-prob [n]      set __hnw_teacher_change-lane-x-of-100 n end



to-report average-speed
  report ifelse-value any? androids [ mean [speed] of androids ] [ 0 ]
end



;;;;;;;;;;;;;;;;;;;;;;;;;;; HOST PROCS OF THE PLOTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ——— HOST Speed Histogram: setup and update ———

to teacher-setup-speed-histogram
  ;set-current-plot "Speed Histogram"
  clear-plot
  let xmax ifelse-value is-number? __hnw_teacher_MaxSpeed [ __hnw_teacher_MaxSpeed ] [ 100 ]
  set-plot-x-range 0 (max (list 1 xmax))
  let bars max list 10 (floor (xmax / 5))
  set-histogram-num-bars bars
end

to teacher-update-speed-histogram
  ;set-current-plot "Speed Histogram"
  ;; one dataset: all student speeds
  let speeds [ speed ] of students
  set-current-plot-pen "dist"
  histogram speeds
  ;; vertical line at mean speed (students only)
  let avg ifelse-value any? students [ mean speeds ] [ 0 ]
  set-current-plot-pen "avg-speed"
  plot-pen-reset
  plotxy avg 0
  plotxy avg (count students)
end



;; ——— HOST Distance Histogram: setup and update ———

to teacher-setup-distance-histogram
  ;set-current-plot "Distance Histogram"
  clear-plot
  ;; x-range up to max laps so far, fallback to 1 if no students yet
  let xmax ifelse-value any? students [ ceiling max [laps-float] of students ] [ 1 ]
  set-plot-x-range 0 (max (list 1 xmax))
  set-histogram-num-bars 10   ;; adjust bins if you want finer granularity
end

to teacher-update-distance-histogram
  ;set-current-plot "Distance Histogram"
  let laps [ laps-float ] of students

  set-current-plot-pen "dist"
  histogram laps

  ;; vertical line at mean laps
  let avg ifelse-value any? students [ mean laps ] [ 0 ]
  set-current-plot-pen "avg-laps"
  plot-pen-reset
  plotxy avg 0
  plotxy avg (count students)
end





;;;;;;;;;;;;;;;;;;;;;;;;;;; CLIENT PROCS OF THE PLOTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  SPEED  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; ; ======== CLIENT PLOTS (run in the student's turtle context) ========

; to student-setup-my-speed-hist
;   ;set-current-plot "My Speed Histogram"
;   show (word "[DBG] student setup speed plot who=" who)
;   clear-plot
;   let xmax (ifelse-value is-number? __hnw_teacher_MaxSpeed [__hnw_teacher_MaxSpeed] [100])
;   set-plot-x-range 0 xmax
;   set-histogram-num-bars 15
; end

; to student-update-my-speed-hist
;   ;set-current-plot "My Speed Histogram"
;   show (word "[DBG] student update speed plot who=" who)
;   ; keep X large enough for the current data
;   let xmax1 (ifelse-value (length speed-history > 0) [max speed-history] [1])
;   let xmax2 (ifelse-value is-number? __hnw_teacher_MaxSpeed [__hnw_teacher_MaxSpeed] [100])
;   set-plot-x-range 0 max list xmax1 xmax2
;   set-current-plot-pen "dist"
;   histogram speed-history
; end


; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  DISTANCE   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; to student-setup-my-distance-hist
;   show (word "[DBG] student setup distance plot who=" who)
;   ;set-current-plot "My Distance Histogram"
;   clear-plot
;   ; laps can exceed 1 — allow autoscale from 0 to at least 1
;   set-plot-x-range 0  max list 1 (ifelse-value (length laps-history > 0) [max laps-history] [1])
;   set-histogram-num-bars 15
; end

; to student-update-my-distance-hist
;   show (word "[DBG] student update distance plot who=" who)
;   ;set-current-plot "My Distance Histogram"
;   let xmax (ifelse-value (length laps-history > 0) [max laps-history] [1])
;   set-plot-x-range 0 max list 1 xmax
;   set-current-plot-pen "dist"
;   histogram laps-history
; end



;;;;;;;;;;;;;;;;;;;; OF JASON ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; + watched in globals + the block in refresh-student-ui :"if (is-turtle? watched)[...]"
to student-setup-my-speed-hist
  clear-plot
end

to student-update-my-speed-hist
  plot speed
end


to student-setup-my-distance-hist
  clear-plot
end

to student-update-my-distance-hist
  plot laps-float
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ========== CSV: headers & row builders ==========

;; ---------- EXACT Desktop-style section headers (no renames) ----------
to csv-write-init-header
  ;; NOTE: we only emit headers here (no data rows yet).
  ;; Tabs (\t) are used between column names to match your file.

  let H ""
  set H (word
    "GLOBALS:\n"
    "min-pxcor\tmax-pxcor\tmin-pycor\tmax-pycor\tperspective\tsubject\tnextIndex\tdirected-links\tticks\tacceleration\tallow-accident?\tallowance\tandroids-change-lane?\tchange-lane-x-of-100\tcolor-names\tcolors\tdeceleration\tdistancefromcar\textra-lane-length\tinitialspeed\tlog-filename\tmax-possible-codes\tmaxspeed\tnumber-of-cars\tnumber-of-trucks\tradius\trequiredlaps\truntime\tsample-car\tserverzoom-radius\tshape-names\tshowslowestpoint?\tslowing-point\tspeed-limit?\tspeed-parameter\tused-shape-colors\n"
    "\n"
    "TURTLES:\n"
    "who\tcolor\theading\txcor\tycor\tshape\tlabel\tlabel-color\tbreed\thidden?\tsize\tpen-size\tpen-mode\tspeed\tspeed-limit\tspeed-min\tbase-shape\tlane\tacc\tzoom-radius\tuser-id\tinitialheading\tprevheading\tlapcounter\tisfirstlap\tmessageread\tfirstsetup\n"
    "\n"
    "PATCHES:\n"
    "pxcor\tpycor\tpcolor\tplabel\tplabel-color\torig-color\tacc-tick-conuter\n"
    "\n"
    "LINKS:\n"
    "end1\tend2\tcolor\tlabel\tlabel-color\thidden?\tbreed\tthickness\tshape\ttie-mode\n"
    "\n"
    "PLOT \"AverageSpeed\" — plot properties:\n"
    "x min\tx max\ty min\ty max\tautoplot?\tcurrent pen\tlegend open?\tnumber of pens\n"
    "\n"
    "PLOT \"AverageSpeed\" — pen properties (per pen):\n"
    "pen name\tpen down?\tmode\tinterval\tcolor\tx\n"
    "\n"
    "PLOT \"AverageSpeed\" — pen dataset labels line (two pens present):\n"
    "\"MaxSpeed\"\t\t\t\t\t\t\"MinSpeed\"\n"
    "\n"
    "PLOT \"AverageSpeed\" — per-row dataset columns (repeated once per pen, so 8 columns total):\n"
    "x\ty\tcolor\tpen down?\tx\ty\tcolor\tpen down?\n"
  )

  set csv_init H
end





to csv-write-run-header
  show (word "[DBG] ENTER TO csv-write-run-header proc")
  ;; matches "logger.csv" header (per-student, per-second)
  set csv_run (word
    "RunTime,who,user-id,color,heading,xcor,ycor,shape,speed,speed-limit,speed-min,base-shape,lane,acc,zoom-radius,initialheading,prevheading,lapcounter,isfirstlap,messageread,firstsetup\n")
end



to csv-ensure-run-header
  if not csv_has_run_header? [
    ;show (word "[DBG] ENTER TO csv-ensure-run-header proc")
    csv-write-run-header
    set csv_has_run_header? true
  ]
end


to-report csv-row-for-student  ;; turtle reporter
  ;; helper: print breed like {breed students} to match desktop
  let breed-str (word "{breed " breed "}")
  ;; helper: quote label text (desktop quotes strings)
  let qlabel (word "\"" label "\"")

  report (word
    RunTime "," who "," user-id "," color "," heading ","
    xcor "," ycor "," shape "," speed "," speed-limit "," speed-min ","
    base-shape "," lane "," acc "," zoom-radius ","
    InitialHeading "," PrevHeading "," LapCounter "," IsFirstLap "," MessageRead "," firstSetup "\n")
end



to-report csv-init-text
  report csv_init
end

to-report csv-run-text
  report csv_run
end

to clear-csv-run
  set csv_run ""
end


; 2) Optional: a simple helper to make filenames consistent with your wrapper
to-report ts-stamp
  ;; We’ll use ticks for uniqueness since cross-platform-safe timestamp formatting is messy in NLW.
  report (word ticks)
end



; 3) Save the INIT snapshot (header + 1 row)
to save-init-csv
  ;; build non-plot sections (fresh) and then append current plot data
  csv-build-init-file
  csv-emit-plot-averagespeed   ;; <-- add plot section now (after GO has produced data)

  let txt (csv-init-text)
  if (not is-string? txt) [ set txt (word txt) ]
  if (length txt = 0) [ print "INIT CSV is empty; nothing to save." stop ]
  let fname (word "logger_world_init_data_" ts-stamp ".csv")
  send-to:file fname txt
  print (word "Saved: " fname)
end



; 4) Save the RUN log (header + many rows), then clear the model buffer
to save-run-csv
  let txt (csv-run-text)
  if (not is-string? txt) [ set txt (word txt) ]
  if (length txt = 0) [
    print "RUN CSV is empty; nothing to save."
    stop
  ]
  let fname (word "logger_run_" ts-stamp ".csv")
  send-to:file fname txt
  print (word "Saved: " fname)
  clear-csv-run
  print "Run buffer cleared."
end




;;;;;;;;;;;;;;;;;;;;; ADDED FOR "full data-row builders" ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;1) Fix the helpers (drop these in)
;; ===== CSV helpers (fixed) =====
to csv-clear
  set csv_init ""
end

to csv-append [text]
  set csv_init (word csv_init text)
end

to csv-append-line [text]
  set csv_init (word csv_init text "\n")
end

;; ===== CSV helpers: quote every cell, join by CSV_SEP =====
to-report csv-quote-cell [x]
  ;; turn value into a string and wrap with quotes
  let s (word x)
  report (word "\"" s "\"")
end

to-report csv-tab-join [vals]
  let out ""
  foreach vals [
    v ->
    let cell csv-quote-cell v
    ifelse out = "" [
      set out cell
    ] [
      set out (word out CSV_SEP cell)
    ]
  ]
  report out
end




;;2) GLOBALS section (safe values; exact headers)
to csv-emit-globals
  csv-append-line "GLOBALS:"
  csv-append-line (csv-tab-join
    [ "min-pxcor" "max-pxcor" "min-pycor" "max-pycor" "perspective" "subject" "nextIndex"
      "directed-links" "ticks" "acceleration" "allow-accident?" "allowance"
      "androids-change-lane?" "change-lane-x-of-100" "color-names" "colors" "deceleration"
      "distancefromcar" "extra-lane-length" "initialspeed" "log-filename" "max-possible-codes"
      "maxspeed" "number-of-cars" "number-of-trucks" "radius" "requiredlaps" "runtime"
      "sample-car" "serverzoom-radius" "shape-names" "showslowestpoint?" "slowing-point"
      "speed-limit?" "speed-parameter" "used-shape-colors" ])

  ;; keep risky fields "" to avoid NLW surprises
  let g-row (list
    min-pxcor max-pxcor min-pycor max-pycor
    "" "" ""                          ;; perspective, subject, nextIndex (desktop-only)
    ""                                ;; directed-links
    ticks
    __hnw_teacher_acceleration
    __hnw_teacher_allow-accident?
    __hnw_teacher_allowance
    __hnw_teacher_androids-change-lane?
    __hnw_teacher_change-lane-x-of-100
    (word color-names)
    (word colors)
    __hnw_teacher_deceleration
    __hnw_teacher_DistanceFromCar
    __hnw_teacher_extra-lane-length
    __hnw_teacher_InitialSpeed
    "logger"
    max-possible-codes
    __hnw_teacher_MaxSpeed
    __hnw_teacher_number-of-cars
    __hnw_teacher_number-of-trucks
    __hnw_teacher_radius
    __hnw_teacher_requiredlaps
    RunTime
    ""                                ;; sample-car (structure in your model; keep text-safe)
    ServerZoom-radius
    (word shape-names)
    __hnw_teacher_ShowSlowestPoint?
    ""                                ;; Slowing-Point (structure), leave blank
    __hnw_teacher_speed-limit?
    __hnw_teacher_speed-parameter
    (word used-shape-colors)
  )
  csv-append-line (csv-tab-join g-row)
  csv-append-line ""
end




;;3) TURTLES section (guard student-only fields)
to csv-emit-turtles
  csv-append-line "TURTLES:"
  csv-append-line (csv-tab-join
    [ "who" "color" "heading" "xcor" "ycor" "shape" "label" "label-color"
      "breed" "hidden?" "size" "pen-size" "pen-mode"
      "speed" "speed-limit" "speed-min" "base-shape" "lane" "acc" "zoom-radius"
      "user-id" "initialheading" "prevheading" "lapcounter" "isfirstlap" "messageread" "firstsetup" ])

  ask turtles [
    let row (list
      who color heading xcor ycor shape label label-color
      breed hidden? size pen-size pen-mode
      speed speed-limit speed-min base-shape lane
      (ifelse-value (breed = students) [ acc ]            [ 0 ])
      (ifelse-value (breed = students) [ zoom-radius ]    [ "" ])
      (ifelse-value (breed = students) [ user-id ]        [ "" ])
      (ifelse-value (breed = students) [ InitialHeading ] [ "" ])
      (ifelse-value (breed = students) [ PrevHeading ]    [ "" ])
      (ifelse-value (breed = students) [ LapCounter ]     [ 0 ])
      (ifelse-value (breed = students) [ IsFirstLap ]     [ 0 ])
      (ifelse-value (breed = students) [ MessageRead ]    [ "" ])
      (ifelse-value (breed = students) [ firstSetup ]     [ 0 ])
    )
    csv-append-line (csv-tab-join row)
  ]
  csv-append-line ""
end



;;4) PATCHES section (guards optional vars)

to csv-emit-patches
  csv-append-line "PATCHES:"
  csv-append-line (csv-tab-join
    [ "pxcor" "pycor" "pcolor" "plabel" "plabel-color" "orig-color" "acc-tick-conuter" ])

  ask patches [
    let row (list
      pxcor pycor pcolor plabel plabel-color
      (ifelse-value (member? "orig-color"    [ "orig-color" ])    [ orig-color ]       [ "" ])
      (ifelse-value (member? "acc-tick-conuter" [ "acc-tick-conuter" ]) [ acc-tick-conuter ] [ 0 ])
    )
    csv-append-line (csv-tab-join row)
  ]
  csv-append-line ""
end


;;5) LINKS section
to csv-emit-links
  csv-append-line "LINKS:"
  csv-append-line (csv-tab-join
    [ "end1" "end2" "color" "label" "label-color" "hidden?" "breed" "thickness" "shape" "tie-mode" ])

  ask links [
    let row (list [who] of end1 [who] of end2 color label label-color hidden? breed thickness shape tie-mode)
    csv-append-line (csv-tab-join row)
  ]
  csv-append-line ""
end




; ;;6) PLOT “AverageSpeed” section (headers only for now)
to csv-emit-plot-averagespeed
  ;; ===== Desktop-style layout =====
  csv-append-line "PLOTS"
  csv-append-line "AverageSpeed"
  csv-append-line "AverageSpeed"   ;; desktop puts the title again, not quoted

  ;; properties header + values
  csv-append-line (csv-tab-join
    [ "x min" "x max" "y min" "y max" "autoplot?" "current pen" "legend open?" "number of pens" ])
  csv-append-line (csv-tab-join
    (list
      avg_xmin avg_xmax avg_ymin avg_ymax
      (ifelse-value avg_autoplot? [ "TRUE" ] [ "FALSE" ])
      avg_current_pen
      (ifelse-value avg_legend_open? [ "TRUE" ] [ "FALSE" ])
      avg_num_pens))
  csv-append-line ""  ;; blank row

  ;; pen properties (per pen)
  csv-append-line (csv-tab-join [ "pen name" "pen down?" "mode" "interval" "color" "x" ])
  csv-append-line (csv-tab-join (list avg_penA_name "TRUE" avg_penA_mode avg_penA_interval avg_penA_color avg_penA_lastx))
  csv-append-line (csv-tab-join (list avg_penB_name "TRUE" avg_penB_mode avg_penB_interval avg_penB_color avg_penB_lastx))
  csv-append-line ""  ;; blank row

  ;; dataset labels row: put names in col1 and col7, with 5 empties between
  csv-append-line (csv-tab-join (list avg_penA_name "" "" "" "" "" avg_penB_name ""))

  ;; NO extra blank line here — go straight to the 8-column header
  csv-append-line (csv-tab-join [ "x" "y" "color" "pen down?" "x" "y" "color" "pen down?" ])

  ;; side-by-side data rows (A = MaxSpeed, B = MinSpeed)
  let nA length avg_penA_points
  let nB length avg_penB_points
  let n  max list nA nB
  let i 0
  while [ i < n ] [
    let a (ifelse-value (i < nA) [ item i avg_penA_points ] [ [] ])
    let b (ifelse-value (i < nB) [ item i avg_penB_points ] [ [] ])

    let ax (ifelse-value (length a >= 1) [ item 0 a ] [ "" ])
    let ay (ifelse-value (length a >= 2) [ item 1 a ] [ "" ])
    let ac (ifelse-value (length a >= 3) [ item 2 a ] [ "" ])
    let ad (ifelse-value (length a >= 4) [ item 3 a ] [ "" ])

    let bx (ifelse-value (length b >= 1) [ item 0 b ] [ "" ])
    let by (ifelse-value (length b >= 2) [ item 1 b ] [ "" ])
    let bc (ifelse-value (length b >= 3) [ item 2 b ] [ "" ])
    let bd (ifelse-value (length b >= 4) [ item 3 b ] [ "" ])

    csv-append-line (csv-tab-join (list ax ay ac ad bx by bc bd))
    set i i + 1
  ]
end





;;7) One entry point to build the whole INIT file - 7) Build everything
to csv-build-init-file
  csv-clear
  csv-emit-globals
  csv-emit-turtles
  csv-emit-patches
  csv-emit-links
  csv-emit-plot-averagespeed
end






; *** NetLogo 4.1RC6 Model Copyright Notice ***
;
; This activity and associated models and materials were created as part of the projects:
; PARTICIPATORY SIMULATIONS: NETWORK-BASED DESIGN FOR SYSTEMS LEARNING IN
; CLASSROOMS and/or INTEGRATED SIMULATION AND MODELING ENVIRONMENT.
; The project gratefully acknowledges the support of the
; National Science Foundation (REPP & ROLE programs) --
; grant numbers REC #9814682 and REC-0126227.
;
; Copyright 1999 by Uri Wilensky & Walter Stroup.  All rights reserved.
;
; Permission to use, modify or redistribute this model is hereby granted,
; provided that both of the following requirements are followed:
; a) this copyright notice is included.
; b) this model will not be redistributed for profit without permission
;    from the copyright holders.
; Contact the copyright holders for appropriate licenses for redistribution for
; profit.
;
; If you mention this model in an academic publication, we ask that you
; include citations for the model itself and for the NetLogo software.
;
; To cite the model, please use:
; Wilensky, U. and Stroup, W. (1999).  NetLogo HubNet Disease model.
; http://ccl.northwestern.edu/netlogo/models/HubNetDisease.
; Center for Connected Learning and Computer-Based Modeling,
; Northwestern University, Evanston, IL.
;
; To cite NetLogo, please use:
; Wilensky, U. (1999). NetLogo. Center for Connected Learning and
; Computer-Based Modeling, Northwestern University, Evanston, IL.
; http://ccl.northwestern.edu/netlogo.
;
; In other publications, please use:
; Copyright 1999 Uri Wilensky and Walter Stroup.  All rights reserved.
; See http://ccl.northwestern.edu/netlogo/models/HubNetDisease
; for terms of use.
;
; *** End of NetLogo 4.1RC6 Model Copyright Notice ***